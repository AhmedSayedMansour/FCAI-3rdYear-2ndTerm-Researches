#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mpi.h"
int **alloc(int rows, int cols)
{
    int *data = (int *)malloc(rows*cols*sizeof(int));
    int **array= (int **)malloc(rows*sizeof(int*));
    int i;
    for (i=0; i<rows; i++)
        array[i] = &(data[cols*i]);

    return array;
}
void free2D(int **mat)
{
    free(mat[0]);
    free(mat);

}
void printMat(int **mat,int row, int col)
{
    int i,j;
for (i=0; i<row; i++)
    {
        for (j=0; j<col; j++)
        {
            printf("%d   ",mat[i][j]);
        }
        printf("\n");
    }

}
int main(int argc, char * argv[])
{
    int my_rank;		/* rank of process	*/
    int p;			/* number of process	*/
    int source;		/* rank of sender	*/
    int dest;		/* rank of reciever	*/
    int tag = 0;		/* tag for messages	*/
    MPI_Status status;	/* return status for 	*/
    MPI_Init( &argc, &argv );
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
    MPI_Comm_size(MPI_COMM_WORLD, &p);
    int **mat1;
    int **mat2;
    int **mat3;
    int n,r,m;
    int i,j,k,sum;
    int start[100];
    int end[100];
    int istart,iend;
    int avg,extra,taken,temp;
    if (my_rank==0)
    {

        n=r=m=24;
        mat1=alloc(n,r);
        mat2=alloc(r,m);
        mat3=alloc(n,m);

        for (i=0; i<n; i++)
        {
            for (j=0; j<r; j++)
            {
                mat1[i][j]=1;
            }
        }
        for (i=0; i<r; i++)
        {
            for (j=0; j<m; j++)
            {
                mat2[i][j]=5;

            }
        }
        MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&r, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&m, 1, MPI_INT, 0, MPI_COMM_WORLD);

        avg=n/(p-1);
        extra=n%(p-1);
        temp=0;


        for (i=1; i<p; i++)
        {
            taken=(extra--<=0)? avg: avg+1;
            start[i-1]=temp;
            temp+=taken;
            end[i-1]=temp;
        }

        double startTime = MPI_Wtime();
        for (source=1; source<p; source++)
        {
            if (start[source-1]>=n)
            {
                start[source-1]=end[source-1]=0;
            }

                MPI_Send(&start[source-1],1,MPI_INT,source,tag,MPI_COMM_WORLD);
                MPI_Send(&end[source-1],1,MPI_INT,source,tag,MPI_COMM_WORLD);
            if (start[source-1]!=0)
            {


                MPI_Send(&mat1[start[source-1]][0], (end[source-1]-start[source-1])*r, MPI_INT, source, tag, MPI_COMM_WORLD);
                MPI_Send(&mat2[start[0]][0], r*m, MPI_INT, source, tag, MPI_COMM_WORLD);

            }
            printf("data sent to process %d \n",source);


        }
        for (i=1; i<p; i++)
        {
            if (start[i-1]!=0)
            {

                MPI_Recv(&mat3[start[i-1]][0], (end[i-1]-start[i-1])*m, MPI_INT, i, tag, MPI_COMM_WORLD, &status);


            }
        }
        double endTime = MPI_Wtime();
        printf("time %f \n",endTime-startTime);
        printMat(mat3,n,m);
        free2D(mat1);
        free2D(mat2);
        free2D(mat3);

    }
    else
    {
        MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&r, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&m, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Recv(&istart,1,MPI_INT,0,tag, MPI_COMM_WORLD,&status);
        MPI_Recv(&iend,1,MPI_INT,0,tag, MPI_COMM_WORLD,&status);

        if (istart!=0)
        {
            mat1=alloc(iend-istart,r);
            mat2=alloc(r,m);
            mat3=alloc(iend-istart,m);

            MPI_Recv(&mat1[0][0], (iend-istart)*r, MPI_INT, 0, tag, MPI_COMM_WORLD,&status);

            MPI_Recv(&mat2[0][0], m*r, MPI_INT, 0, tag, MPI_COMM_WORLD,&status);
      sum=0;
            for (i=istart; i<iend; i++)
            {
                for (j=0; j<m; j++)
                {
                    for(k=0; k<r; k++)
                    {
                        sum += mat1[i-istart][k]*mat2[k][j];
                    }
                    mat3[i-istart][j]=sum;
                    sum = 0;
                }
            }

            MPI_Send(&mat3[0][0], (iend-istart)*m, MPI_INT, 0, tag, MPI_COMM_WORLD);
            // printMat(mat1,iend-istart,r);
            //printMat(mat2,r,m);
            //printMat(mat3,iend-istart,m);
            free2D(mat1);
            free2D(mat2);
            free2D(mat3);
        }


    }



    /* shutdown MPI */
    MPI_Finalize();
    return 0;
}
